Q.1 Create a structure Student ( rollno, name), Create a structure variable and Access the members using structure variable.

Ans:
     #include<stdio.h>
     #include<string.h>
struct students
{
	char name[10];
	int rollno;
};
int main()
{
	struct students s1,s2;
	strcpy(s1.name,"Ajay");
	strcpy(s2.name,"Vijay");
	s1.rollno=10;
	s2.rollno=20;
	printf("Name %s ,Rollno. %d\n",s1.name,s1.rollno);
	printf("Name %s ,Rollno. %d",s2.name,s2.rollno);
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.2 Create a structure pointer which can access the members of the structure Student and print member values.

Ans:
    #include<stdio.h>
    #include<string.h>
    struct Student
    {
       int rollono;
       char name[10];
    };
    int main()
    {
       struct Student *s1,s;
       s1=&s;
       strcpy(s1->name,"Ajay");
       s1->rollno=10;
       printf("Name :%s , Rollno: %d",s1->name,s1->rollno);
    }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.3 Create an array of structure which is used to store 3 employee records.

Ans :#include<stdio.h>
#include<string.h>

typedef struct Employees
{    	                   
	char name[20];
	int age,cont;
	
}employee;

int main()
{
	employee emp[3];
	char nm[20];
	
	int i;
	for(i=0;i<3;i++)
	{
		printf("Person %d Details :\n",i+1);
		printf("Name : ");
		gets(nm);
		strcpy(emp[i].name,nm);
		fflush(stdin); 
		printf("Age : ");
		scanf("%d",&emp[i].age);
		printf("Cont.No.:");
		scanf("%d",&emp[i].cont);
	    fflush(stdin);
	}	
    printf("\n");
	for(i=0;i<3;i++)
	{
		printf("Name : %s\tage : %d\tcont.No.: %d \n",emp[i].name,emp[i].age,emp[i].cont);
	}	
}
-------------------------------------------------------------------------------------------------------------------
Q.4 Create a float pointer which points to the float array and access all elements of array using float pointer.

Ans:
    #include<stdio.h>

int main()
{
	float a[3];
	float *s;
	s=a;
	int i;
	for(i=0;i<3;i++)
	{
		printf("Enter Float value :");
		scanf("%f",&s[i]);
	}
	for(i=0;i<3;i++)
	{
		printf("%f\t",s[i]);
	}
	
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.5 Create an integer pointer for which memroy is allocated dynamically.

Ans:
    #include<stdio.h>
    #include<stdlib.h>
int main()
{
	int *p = (int*) malloc(3*sizeof(int)); 
	
	int i;

	for(i=0;i<3;i++)
	{
		printf("Enter Value :");
		scanf("%d",&p[i]);
	}
	
	for(i=0;i<3;i++) 
	{
		printf("%d\t",p[i]);
	}
	free(p);
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.6 Create a stack of 5 characters and display all elements.
Ans:
     #include<stdio.h>
#include<stdlib.h>
#define SIZE 5

typedef struct st
{
	int top;
	char elements[SIZE];	
}stack;


void initialize(stack *sp)
{
	sp->top=-1;
}

void push(stack *sp,int item)
{
		if(is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->elements[++sp->top]=item;
}

int pop(stack *sp)
{
	int x;
	if(is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->elements[sp->top--];
	return x;	
}

int is_full(stack *sp)   
{
	if(sp->top == SIZE-1)      
		return 1;
	else
		return 0;
}

int is_empty(stack *sp)   
{
	if(sp->top == -1)          
		return 1;
	else
		return 0;	
}

int main()
{
	stack s1;
	
	initialize(&s1);
	
	push(&s1,'H');
	push(&s1,'e');
	push(&s1,'l');
	push(&s1,'l');
	push(&s1,'o');
	int i;
	
	for(i=s1.top;i!=-1;i--)
	{
		printf("%c ",s1.elements[i]);	
	}	
	printf("\nthis is the end of the Code");
	
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.7 Create a stack of 5 names of employees and delete the last name and display it.
Ans:
    #include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define SIZE 10

typedef struct st
{
	int top;
	char name[SIZE][SIZE];	
}stack;


void initialize(stack *sp)
{
	sp->top=-1;
}

void push(stack *sp,char* item)
{
		if(sp->top==SIZE-1)	
			printf("\nStack overflow\n");
		else
			strcpy(sp->name[++sp->top],item);
}


char* pop(stack *sp)
{
	int x;
	if(sp->top==-1)
		printf("\nStack underflow");
	else
		x=sp->name[sp->top--];
	return x;	
	
}
void display(stack *sp)
{
	int i;
	for(i=sp->top;i!=-1;i--)
	{
		printf("%s\n",*(sp->name+i));	
	}	
}


int main()
{
	stack s1;
	initialize(&s1);
	push(&s1,"Ajay");
	push(&s1,"Vijay");
	push(&s1,"Digvijay");
	push(&s1,"jaya");
	push(&s1,"jay");
	printf("Befor POP\n");
	display(&s1);
	printf("\n");
	pop(&s1);
	printf("After POP\n");
	display(&s1);
	printf("\nthis is the end of the Code");
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.8 Create two stacks A and B . A contains 3 alphabets and B contains 3 numbers. Display Both stacks.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>
     #define SIZE 3

typedef struct a_st
{
	int Atop;
	char Aelements[SIZE];	
}A;
typedef struct b_st
{
	int Btop;
	int Belements[SIZE];	
}B;


void Ainitialize(A *sp)
{
	sp->Atop=-1;
}
void Binitialize(B *sp)
{
	sp->Btop=-1;
}

void Apush(A *sp,char item)
{
		if(A_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Aelements[++sp->Atop]=item;
}
void Bpush(B *sp,int item)
{
		if(B_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Belements[++sp->Btop]=item;
}

int Apop(A *sp)
{
	int x;
	if(A_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Aelements[sp->Atop--];
	return x;	
}
int Bpop(B *sp)
{
	int x;
	if(B_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Belements[sp->Btop--];
	return x;	
}

int A_is_full(A*sp)   
{
	if(sp->Atop == SIZE-1)      
		return 1;
	else
		return 0;
}
int B_is_full(B *sp)   
{
	if(sp->Btop == SIZE-1)      
		return 1;
	else
		return 0;
}

int A_is_empty(A *sp)   
{
	if(sp->Atop == -1)          
		return 1;
	else
		return 0;	
}
int B_is_empty(B *sp)   
{
	if(sp->Btop == -1)          
		return 1;
	else
		return 0;	
}
void A_display(A *sp)
{
	int i;
	
	for(i=sp->Atop;i!=-1;i--)
	{
		printf("%c ",sp->Aelements[i]);	
	}	
	printf("\n\n");
}

void B_display(B *sp)
{
	int i;
	
	for(i=sp->Btop;i!=-1;i--)
	{
		printf("%d ",sp->Belements[i]);	
	}	
	printf("\n\n");
}


int main()
{
	A a;
	
	Ainitialize(&a);
	
	Apush(&a,'a');
	Apush(&a,'b');
	Apush(&a,'c');
	
	A_display(&a);
	
	B b;
	Binitialize(&b);
	Bpush(&b,10);
	Bpush(&b,20);
	Bpush(&b,30);
	
	B_display(&b);
	
}
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.9 Create a queue which contains 5 double values and print all values.
 Ans:
     #include<stdio.h>
     #define SIZE 5
typedef struct queue
{
	int front;
	int rear;
	double elements[SIZE];
}queue;
void initialize(queue *qp)
{
	qp->front=-1;
	qp->rear=-1;
}
void add(queue *qp,double item)
{
	if(qp->rear==SIZE-1)
	  printf("\nQueue Overflow");
	else 
	 qp->elements[++qp->rear]=item;
}
int rem(queue *qp)
{
	double x;
	if(qp->front==-1)
	  printf("\nQueue is Empty");
	else
	 x=qp->elements[qp->front++];
	return x;
}
void display(queue *qp)
{
	int i;
	for(i=qp->front;i<qp->rear;i++)
	{
		printf("%lf\t",qp->elements[i]);
	}
}
int main()
{
	queue q;
	initialize(&q);
	add(&q,1.2344);
	add(&q,3.456);
	add(&q,12.45);
	add(&q,10);
	add(&q,1.2);
	
	display(&q);
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.10 Create a queue which contains 5 numbers and print the square value of every element of the queue.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>
     #define SIZE 5

typedef struct queue
{
	int front;
	int rear;
	int elements[SIZE];
}queue;

void initialize(queue *qp)
{
	qp->front=-1;
	qp->rear=-1;
}

void add(queue *qp,int item)
{
	if(qp->rear==SIZE-1)
    printf("\nQueue Overflow");
    else
    {
    	if(qp->front ==-1)
    	qp->front=0;
	    qp->elements[++qp->rear]=item;
    }
}

int rem(queue *qp)
{
	char x;
	if(qp->front==-1)
	printf("\nQueue Empty");
	else
	x=qp->elements[qp->front++];
	return x;
}

void display(queue *qp)
{
	int i;
	for(i=qp->front;i<=qp->rear;i++)
	{
		printf("Square Value is : %d\n",(qp->elements[i])*(qp->elements[i]));
	}
}
int main()
{
    queue q;
	initialize(&q);
	add(&q,1);
	add(&q,2);
	add(&q,3);
	add(&q,4);
	add(&q,5);
	
	display(&q);
		
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.11 Create a stack which contains ASCII values for alphabets and print Alphabets.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>
     #define SIZE 27

typedef struct st
{
	int top;
	int elements[SIZE];	
}stack;


void initialize(stack *sp)
{
	sp->top=-1;
}

void push(stack *sp,int item)
{
		if(is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->elements[++sp->top]=item;
}

int pop(stack *sp)
{
	int x;
	if(is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->elements[sp->top--];
	return x;	
}

int is_full(stack *sp)   
{
	if(sp->top == SIZE-1)      
		return 1;
	else
		return 0;
}

int is_empty(stack *sp)   
{
	if(sp->top == -1)          
		return 1;
	else
		return 0;	
}
void display(stack *sp)
{
	int i;
	for(i=sp->top;i!=-1;i--)
	{
		printf("%c\t",sp->elements[i]);
	}
}

int main()
{
	stack s1;
	
	initialize(&s1);
	
	int i;
	for(i=65;i<91;i++)
	{
		push(&s1,i);
	}	
	display(&s1);
	printf("\nthis is the end of the Code");
	
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.12 Take 10 numbers from user, Make two stacks as Even & Odd, Even stack contains even numbers , Odd stack contains odd numbers.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>
     #define SIZE 10

typedef struct Odd_st
{
	int Atop;
	int Aelements[SIZE];	
}odd;
typedef struct Even_st
{
	int Btop;
	int Belements[SIZE];	
}even;


void Ainitialize(odd *sp)
{
	sp->Atop=-1;
}
void Binitialize(even *sp)
{
	sp->Btop=-1;
}

void Apush(odd *sp,char item)
{
		if(A_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Aelements[++sp->Atop]=item;
}
void Bpush(even *sp,int item)
{
		if(B_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Belements[++sp->Btop]=item;
}

int Apop(odd *sp)
{
	int x;
	if(A_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Aelements[sp->Atop--];
	return x;	
}
int Bpop(even *sp)
{
	int x;
	if(B_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Belements[sp->Btop--];
	return x;	
}

int A_is_full(odd*sp)   
{
	if(sp->Atop == SIZE-1)      
		return 1;
	else
		return 0;
}
int B_is_full(even *sp)   
{
	if(sp->Btop == SIZE-1)      
		return 1;
	else
		return 0;
}

int A_is_empty(odd *sp)   
{
	if(sp->Atop == -1)          
		return 1;
	else
		return 0;	
}
int B_is_empty(even *sp)   
{
	if(sp->Btop == -1)          
		return 1;
	else
		return 0;	
}
void A_display(odd *sp)
{
	int i;
	
	for(i=sp->Atop;i!=-1;i--)
	{
		printf("%d ",sp->Aelements[i]);	
	}	
	printf("\n");
}

void B_display(even *sp)
{
	int i;
	
	for(i=sp->Btop;i!=-1;i--)
	{
		printf("%d ",sp->Belements[i]);	
	}	
	printf("\n");
}

int main()
{
	odd a;
	even b;
	int *s;
	Ainitialize(&a);
	Binitialize(&b);
	int i,j;
	for(i=0;i<SIZE;i++)
	{
		printf("Enter Number :");
		scanf("%d",&j);
		{
	      int val=j%2;
	          switch(val)
	     {
		   case 0:
				Apush(&a,j);
				break;
		   case 1:
				Bpush(&b,j);
				break;
		 }
        }
	}
	A_display(&a);
	B_display(&b);
	printf("\nThis is the end of code ");
	
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.13 Make a program to copy elements of one stack to another.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>
     #include<string.h>
     #define SIZE 5

typedef struct a_st
{
	int Atop;
	char Aelements[SIZE];	
}A;
typedef struct b_st
{
	int Btop;
	char Belements[SIZE];	
}B;


void Ainitialize(A *sp)
{
	sp->Atop=-1;
}
void Binitialize(B *sp)
{
	sp->Btop=-1;
}

void Apush(A *sp,char item)
{
		if(A_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Aelements[++sp->Atop]=item;
}
void Bpush(B *sp,char item)
{
		if(B_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Belements[++sp->Btop]=item;
}


int Apop(A *sp)
{
	int x;
	if(A_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Aelements[sp->Atop--];
	return x;	
}

int A_is_full(A*sp)   
{
	if(sp->Atop == SIZE-1)      
		return 1;
	else
		return 0;
}
int B_is_full(B*sp)   
{
	if(sp->Btop == SIZE-1)      
		return 1;
	else
		return 0;
}


int A_is_empty(A *sp)   
{
	if(sp->Atop == -1)          
		return 1;
	else
		return 0;	
}
int B_is_empty(B*sp)   
{
	if(sp->Btop == -1)          
		return 1;
	else
		return 0;	
}

void A_display(A *sp)
{
	int i;
	
	for(i=sp->Atop;i!=-1;i--)
	{
		printf("%d ",sp->Aelements[i]);	
	}	
	printf("\n\n");
}

void B_display(B *sp)
{
	int i;
	
	for(i=sp->Btop;i!=-1;i--)
	{
		printf("%d ",sp->Belements[i]);	
	}	
	printf("\n\n");
}

int main()
{
	A a;
	Ainitialize(&a);
	B b;
	Binitialize(&b);
	int *p1;
	p1=&a;
	int i,j;
	for(i=0;i<SIZE;i++)
	{
		printf("Enter Number :");
		scanf("%d",&j);
		Apush(&a,j);
		Bpush(&b,j);
	}
	A_display(&a);
	printf("\n");
	B_display(&b);	
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.14 Read 5 numbers from user and store it in a stack.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>
     #define SIZE 5

typedef struct st
{
	int top;
	int elements[SIZE];	
}stack;
void initialize(stack *sp)
{
	sp->top=-1;
}
void push(stack *sp,int item)
{
		if(is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->elements[++sp->top]=item;
}
int pop(stack *sp)
{
	int x;
	if(is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->elements[sp->top--];
	return x;	
}
int is_full(stack*sp)   
{
	if(sp->top == SIZE-1)      
		return 1;
	else
		return 0;
}
int is_empty(stack *sp)   
{
	if(sp->top == -1)          
		return 1;
	else
		return 0;	
}
void display(stack *sp)
{
	int i;
	
	for(i=sp->top;i!=-1;i--)
	{
		printf("%d ",sp->elements[i]);	
	}	
	printf("\n");
}
int main()
{
	stack s1;
	initialize(&s1);
	int i,j;
	for(i=s1.top;i<4;i++)
	{
		printf("Enter Number :");
		scanf("%d",&j);
		push(&s1,j);
	}
	display(&s1);
	printf("\nThis is the end of code ");
	
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.15 Create a Link list of 5 nodes which stores information as a character.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>

typedef struct nd             
{                           
	char data;
	struct nd *next;
}node;

node* createNode(char no)
{
	node *np;
	
	np=(node*)malloc(sizeof(node));  
	
	if(np == NULL)
	{
		printf("Memory not available");
		exit(0);	
	}
	
	np->data=no;
	np->next=NULL;
	
	return np;
}

int main()
{	
	node *p,*head,*tail,*ptr;	
	
	head=createNode('H');  
	tail=head;
	p=createNode('E');    
	
	tail->next=p;  
    tail=tail->next;
   
    p=createNode('L');    
    
	tail->next=p;       
	tail=tail->next;
	
	p=createNode('L');    
    
	tail->next=p;       
	tail=tail->next;
	
	p=createNode('O');    
    
	tail->next=p;       
	tail=tail->next;
	
	ptr=head;
	
	while(ptr!=NULL)
	{
		printf("%c ",ptr->data);
		ptr=ptr->next;
	}

}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.16 Write a program to count the number of nodes in the link list.
 Ans :
      #include<stdio.h>
      #include<stdlib.h>

typedef struct nd             
{                            
	int data;
	struct nd *next;
}node;

typedef struct li
{
	node *head,*tail;	
}List;

void initialize(List *lp)
{
	lp->head=NULL;
	lp->tail=NULL;	
}

node* createNode(int no)
{
	node *np;
	
	np=(node*)malloc(sizeof(node)); 
	
	if(np == NULL)
	{
		printf("Memory not available");
		exit(0);	
	}
	
	np->data=no;
	np->next=NULL;
	
	return np;
}


void insertAtTail(List *lp,int x)         // lp = lp, x =100
{
	node *np;
	
	np=createNode(x);     // Creating a node
	if(lp->head == NULL)
		lp->head=np;
	else
		lp->tail->next =np;
	lp->tail= np;
	
}

List* createList(int size)
{
	List *lp;
	lp=(List*)malloc(sizeof(List));
		initialize(lp);
	int i;
	int x;
	for(i=0;i<size;i++)
	{
		printf("Enter Item : ");
		scanf("%d",&x);
		insertAtTail(lp,x);
	}
	return lp;
}

void traverse(List *lp)
{
	node *p;
	p=lp->head;
	printf("List is : ");
	while(p!=NULL)
	{
		printf("%d ",p->data);
		p=p->next;	
	}	
}

int getNodeCount(List *lp)
{
	node *p;
	
	int count=0;
	
	for(p=lp->head;p!=NULL;p=p->next)
	{
		++count;	
	}	
	printf("\nCount the number of nodes in the link list is %d",count);
}

int main()
{	
	List *lp;
	int x;
	printf("Enter Number Of node to Create :");
	scanf("%d",&x);
	lp=createList(x);
	traverse(lp);
	getNodeCount(lp);
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
Q.17 Create a Link list of 3 nodes containing 3 double values and print the average of 3 numbers.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>

typedef struct nd             
{                           
	float data;
	struct nd *next;
}node;

node* createNode(float  no)
{
	node *np;
	
	np=(node*)malloc(sizeof(node));  
	
	if(np == NULL)
	{
		printf("Memory not available");
		exit(0);	
	}
	
	np->data=no;
	np->next=NULL;
	
	return np;
}

int main()
{	
	node *p,*head,*tail,*ptr;	
	
	head=createNode(10);  
	tail=head;
	p=createNode(20);    
	
	tail->next=p;  
    tail=tail->next;
   
    p=createNode(30);    
    
	tail->next=p;       
	tail=tail->next;
	
	ptr=head;
	
	while(ptr!=NULL)
	{
		printf("%f ",ptr->data);
		ptr=ptr->next;
	}
	ptr=head;
	float tot=0;
	while(ptr!=NULL)
	{
		tot=(tot+ptr->data);
		ptr=ptr->next;
	}
	printf("\n%f",tot);
	float avg=0;
	avg=tot/3;
	printf("\n%f",avg);
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
Q.18 Create a Link list of 5 nodes and print it in reverse order.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>

typedef struct nd            
{                           
	int data;               
	struct nd *next;        
	struct nd *prev;        
}node;

int main()
{	
	 node *head;
	 node *one=NULL;
	 node *two=NULL;
	 node *three=NULL;
	
	one=(node*)malloc(sizeof(node));    
	two=(node*)malloc(sizeof(node));    
	three=(node*)malloc(sizeof(node));  
		
	one->data=101;
	two->data=102;
	three->data=103;
	
	one->next=two;
	one->prev=NULL;
	
	two->next=three;
	two->prev=one;
	
	three->next=NULL;
	three->prev=two;
	
	head=one;
	
	node *p;
	printf("In Reverse Order :\n");
	p=three;
	printf("%d ",p->data);
	p=p->prev;
	
	printf("%d ",p->data);
	p=p->prev;
	
	printf("%d ",p->data);
	p=p->prev;
	
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
Q.19 Create a Link list of 3 nodes and delete the head node.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>
//MULTIPLE NODES
typedef struct st
{
    int data;
    struct nd *next;
}node;


typedef struct ls
{
    node *head,*tail;
}list;


void initialize(list *s)
{
    s->head = NULL;
    s->tail = NULL;
}


node* createnode(int* x)
{
    node *sp;
    
    sp = (node*)malloc(sizeof(node));
    
    if(sp == NULL)
    {
        printf("MEMORY UNAVAILABLE");
        exit(0);
    }
    
    sp->data = x;
    sp->next = NULL;
    
    return sp;
}


void insertAtail(list *s,int *x)
{
    node *sp;
    
    sp=createnode(x);
    if(s->head==NULL)
    s->head=sp; 
    else
    s->tail->next=sp;
    s->tail=sp;
}

void traverse(list *s)
{
    node *p;
    
    p=s->head->next;
    
    while(p!=0)
    {
        printf("\t%d\t",p->data);
        p=p->next;
    }
}


int main()
{
    list *s;
    
    s=(list*)malloc(sizeof(list));
    
    if(s == NULL)
    {
        printf("MEMORY UNAVAILABLE");
        exit(0);
    }
    
    initialize(s);
    
    insertAtail(s,10);
    insertAtail(s,20);
    insertAtail(s,30);
    
    
    traverse(s);
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.20 Create a list of 3 city names and Enter a city to be searched in the list .If city name exists in list then Display City Found.
 Ans:
     #include<stdio.h>
     #include<string.h>
int main()
{
    char data[100][100],search[50];
    int i,c=0;
    for(i=0;i<3;i++)
    {
        printf("Enter City Name %d : = ",i+1);
        scanf("%s",data[i]);
    }
    printf("\nCity Name are:\n");
    for(i=0;i<3;i++)
    {
        printf("%s\t",data[i]);
    }
    printf("\n\nEnter Name to be Searched: ");
    scanf("%s",search);
    for(i=0;i<3;i++)
    {
        if(strcmp(data[i],search)==0)
        {
            c=1;
            break;
        }
    }
    if(c==1)
        printf("\n%s Found at Position '%d'",data[i],i+1);
    else
        printf("\n%s NOT Present in Above Array",data[i]);
    return 0;
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.21 Create an array of 5 integer values and search an element in the array using Linear Search.
 Ans:
     #include<stdio.h>
int main()
{
	int a[10]={10,20,30,40,150,50,60,70,80,90};
	int i,item,flag;
	for(i=0;i<10;i++)
	{
		printf("%d ",a[i]);
	}
	printf("\nEnter A name to sesrched\n");
	scanf("%d",&item);
	for(i=0;i<10;i++)
	{
		if(a[i] == item)
		{
			flag=i+1;
			break;
		}
		else
		flag=0;
	}
	if(flag !=0)
	{
		printf("\nItem is Found At The Location %d",flag);
	}
	else
	{
		printf("\nitem is not found ");
	}
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.22 Create an array of string and search a perticular string using Linear Search.
 Ana:
     #include<stdio.h>
     #include<string.h>
int main()
{
    char data[10][10],item[5];
    int i,flag;
    for(i=0;i<5;i++)
    {
        printf("Enter Name :  ");
        scanf("%s",data[i]);
    }
    printf("\nName are:\n");
    for(i=0;i<5;i++)
    {
        printf("%s\t",data[i]);
    }
    printf("\nEnter Name which is to be searched\n");  
    scanf("%s",item); 
    for(i=0;i<5;i++)
    {
        if(strcmp(data[i],item)==0)
        {
            flag=1;
            break;
        }
    }
    if(flag==1)
        printf("\n%s Found at Position '%d'",data[i],i+1);
    else
        printf("\n%s NOT Present in Above Array",data[i]);
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.23 Sort an array of 5 numbers using Insertion sort.
 Ans:
     #include <stdio.h>
int main()
{
    int  i, j, temp;
    int arr[10]={20,40,10,100,2,4,10,4,90,1};
 

    for (i=0;i<10;i++)
    {
        printf("%d ", arr[i]);
    }
    for (i=1;i<=10-1;i++)
    {
	    j=i;
            while (j>0 && arr[j-1]>arr[j])
            {	        
                temp=arr[j];
                arr[j]=arr[j-1];
                arr[j-1]=temp;
                j--;
            }
    }
    printf("\nSorted list in ascending order:\n");
    for (i=0;i<=10-1;i++)
    {
        printf("%d ", arr[i]);
    }
    return 0;
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.24 Make a tree which contains 3 nodes. A is Root node, B is left child and C is right child.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>

typedef struct tr
{
	int data;
	struct tr *left;
	struct tr *right;
}tree;

tree* create_node(int value)
{
	tree *n;
	n=(tree*)malloc(sizeof(tree));
	if(n==NULL)
	{
		printf("Memory is not available");
		exit(1);
	}
	
	n->data=value;
	n->left=NULL;
	n->right=NULL;
	
	return n;
}
int main()
{
	tree *root,*n1,*n2;
	
	root=create_node(100);
	n1=create_node(200);
	n2=create_node(300);
	
	root->left=n1;
	root->right=n2;
	printf("\t%d\n",root->data);
	printf("%d\t",root->left->data);
	printf("\t%d",root->right->data);
	
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.25 Create a tree of 3 nodes where root node displays the value as "Color" , Left node of root shows value as "Red" and right node shows value as Green. 
     and print all node values in using preorder traversal.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>

struct tree
 {
  char data;
  struct tree* left;
  struct tree* right;
};

void preorderTraversal(struct tree* root) 
{
  if (root == NULL) return;
  printf("%s ->", root->data);
  preorderTraversal(root->left);
  preorderTraversal(root->right);
}
 struct tree* create_node(char value)
{
	
	struct tree *n;
	n=(struct tree*)malloc(sizeof(struct tree));

	n->data=value;
	n->left=NULL;
	n->right=NULL;
	
	return n;
}
int main()
{
	struct tree *root,*n1,*n2;
	root=create_node("color")
	n1=create_node("Red");
	n2=create_node("Green");
	
	root->left=n1;
	root->right=n2;
	printf("\t%s\n",root->data);
	printf("%s\t",root->left->data);
	printf("\t%s",root->right->data);
	
	//printf("\nPreorder traversal \n");
    //preorderTraversal(root);	
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.26 Create a link list of 3 integers and print the elements of link list in reverse order using stack.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>

typedef struct nd             
{                           
	char data;
	struct nd *next;
}node;

typedef struct st
{
	int top;
	int elements[3];	
}stack;

void initialize(stack *sp)
{
	sp->top=-1;
}


void push(stack *sp,int item)
{
		if(sp->top == 3-1)	
			printf("\nStack overflow\n");
		else
			sp->elements[++sp->top]=item;
}

void display(stack *sp)
{
	int i;
	
	for(i=sp->top;i!=-1;i--)
	{
		printf("%d ",sp->elements[i]);	
	}	
}

node* createNode(int no)
{
	node *np;
	
	np=(node*)malloc(sizeof(node));  
	
	if(np == NULL)
	{
		printf("Memory not available");
		exit(0);	
	}
	
	np->data=no;
	np->next=NULL;
	
	return np;
}

int main()
{	
	node *p,*head,*tail,*ptr;	
	
	stack s1;
	
	initialize(&s1);
	
	head=createNode(10);  
	tail=head;
	p=createNode(20);    
	
	tail->next=p;  
    tail=tail->next;
   
    p=createNode(30);    
    
	tail->next=p;       
	tail=tail->next;
	
	ptr=head;
	printf("This is Link List :\n");
	while(ptr!=NULL)
	{
		printf("%d ",ptr->data);
		int a=ptr->data;
		push(&s1,a);
		ptr=ptr->next;
	}
	printf("\n");
	printf("This is Stack :\n");
	display(&s1);
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.27 Write a program to crate an adjacency matrix(3 by 3) using graph , where create edges (0,1),(1,2),(1,1), Store the student age information.
 Ans:
     #include<stdio.h>

int main()
{
	int ad[30][3];
	
	int age;
	
	int i,j;
	
	for(i=0;i<3;i++)
	{
		for(j=0;j<3;j++)
		{
			if(i==0 && j==1)
			{
				printf("Enter age :");
				scanf("%d",&age);
				ad[i][j]=age;
			}
			else if(i==1 && j==1)
			{
				printf("Enter age :");
				scanf("%d",&age);
				ad[i][j]=age;
			}
			else if(i==1 && j==2)
			{
				printf("Enter age :");
				scanf("%d",&age);
				ad[i][j]=age;
			}
			else
			{
				ad[i][j]=0; 
			}
		
		}
	}
	
	for(i=0;i<3;i++)
	{
		for(j=0;j<3;j++)
		{
			printf("%d\t",ad[i][j]);
		}
		printf("\n");
	} 
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.28 Create a Binary Serch Tree with 10 nodes where node value is character and Traverse the tree in postorder.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>

typedef struct st
{
	char key;
	struct st *left;
	struct st *right;
}node;

node* newnode(char data)
{
	node *t;
	t=(node*)malloc(sizeof(node));
	t->key=data;
	t->left=NULL;
	t->right=NULL;
	return t;
}

node* insert(node *nd,int data)
{
	if(nd==NULL)
		return newnode(data);
	
	if(data < nd->key)
		nd->left = insert(nd->left,data);
		
	else if(data > nd->key)
		nd->right = insert(nd->right,data);

	return nd;
}

void postorder(node* root) 
{
  if (root == NULL) return;
  postorder(root->left);
  postorder(root->right);
  printf("%c ->", root->key);
}

int main()
{
	node *root;
	root=insert(root,'A');
	root = insert(root,78);
	int i;
	char x;
	
	for(i=0;i<10;i++)
	{
		printf("Enter Character:");
		scanf("%c",&x);
		insert(root,x);
		fflush(stdin); 
	}
	postorder(root);
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.29 Create an unsorted array of 5 elements and sort the array in descending order using bubble sort and search an element in array using Binary Search.
 Ans:
     #include <stdio.h>

int binarySearch(int a[], int beg, int end, int item)   
{                                                      
    int mid;  
    if(end >= beg)   
    {     
        mid = (beg + end)/2;  
        if(a[mid] == item)    
        {  
            return mid+1;     
        }  
        else if(a[mid] > item)   
        {  
            return binarySearch(a,mid+1,end,item);  
        }  
        else   
        {  
            return binarySearch(a,beg,mid-1,item);  
        }  
      
    }  
    return -1;   
}  

int main()
{
    int  i, j, temp;
    int search,arr[10],location=-1;
    
    printf("Enter %d integers\n",10);

  for (i=0;i<10;i++)
    scanf("%d", &arr[i]);
      for (i=0;i<10;i++)
    {
        printf("%d ", arr[i]);
    }
    
  for (i=0;i<10-1;i++)
  {
    for (j=0;j<10-i- 1;j++)
    {
      if (arr[j]<arr[j+1]) 
      {
        temp=arr[j];
        arr[j]=arr[j+1];
        arr[j+1]=temp;
      }
    }
  }
    printf("\nSorted list in Descending order:\n");
    for (i=0;i<=10-1;i++)
    {
        printf("%d ", arr[i]);
    }
    printf("\n\n");
  
	printf("Enter value to find\n");
    scanf("%d", &search);
    
     location = binarySearch(arr, 0, 10, search); 
     
       if(location != -1)   
    {  
        printf("Item found at location %d",location);  
    }  
    else  
    {  
        printf("Item not found");  
    } 

}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
