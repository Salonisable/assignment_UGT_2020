Q.1 Create a structure Student ( rollno, name), Create a structure variable and Access the members using structure variable.

Ans:
     #include<stdio.h>
     #include<string.h>
struct students
{
	char name[10];
	int rollno;
};
int main()
{
	struct students s1,s2;
	strcpy(s1.name,"Ajay");
	strcpy(s2.name,"Vijay");
	s1.rollno=10;
	s2.rollno=20;
	printf("Name %s ,Rollno. %d\n",s1.name,s1.rollno);
	printf("Name %s ,Rollno. %d",s2.name,s2.rollno);
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.2 Create a structure pointer which can access the members of the structure Student and print member values.

Ans:
    #include<stdio.h>
    #include<string.h>
    struct Student
    {
       int rollono;
       char name[10];
    };
    int main()
    {
       struct Student *s1,s;
       s1=&s;
       strcpy(s1->name,"Ajay");
       s1->rollno=10;
       printf("Name :%s , Rollno: %d",s1->name,s1->rollno);
    }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.3 Create an array of structure which is used to store 3 employee records.

Ans :#include<stdio.h>
#include<string.h>

typedef struct Employees
{    	                   
	char name[20];
	int age,cont;
	
}employee;

int main()
{
	employee emp[3];
	char nm[20];
	
	int i;
	for(i=0;i<3;i++)
	{
		printf("Person %d Details :\n",i+1);
		printf("Name : ");
		gets(nm);
		strcpy(emp[i].name,nm);
		fflush(stdin); 
		printf("Age : ");
		scanf("%d",&emp[i].age);
		printf("Cont.No.:");
		scanf("%d",&emp[i].cont);
	    fflush(stdin);
	}	
    printf("\n");
	for(i=0;i<3;i++)
	{
		printf("Name : %s\tage : %d\tcont.No.: %d \n",emp[i].name,emp[i].age,emp[i].cont);
	}	
}
-------------------------------------------------------------------------------------------------------------------
Q.4 Create a float pointer which points to the float array and access all elements of array using float pointer.

Ans:
    #include<stdio.h>

int main()
{
	float a[3];
	float *s;
	s=a;
	int i;
	for(i=0;i<3;i++)
	{
		printf("Enter Float value :");
		scanf("%f",&s[i]);
	}
	for(i=0;i<3;i++)
	{
		printf("%f\t",s[i]);
	}
	
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.5 Create an integer pointer for which memroy is allocated dynamically.

Ans:
    #include<stdio.h>
    #include<stdlib.h>
int main()
{
	int *p = (int*) malloc(3*sizeof(int)); 
	
	int i;

	for(i=0;i<3;i++)
	{
		printf("Enter Value :");
		scanf("%d",&p[i]);
	}
	
	for(i=0;i<3;i++) 
	{
		printf("%d\t",p[i]);
	}
	free(p);
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.6 Create a stack of 5 characters and display all elements.
Ans:
     #include<stdio.h>
#include<stdlib.h>
#define SIZE 5

typedef struct st
{
	int top;
	char elements[SIZE];	
}stack;


void initialize(stack *sp)
{
	sp->top=-1;
}

void push(stack *sp,int item)
{
		if(is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->elements[++sp->top]=item;
}

int pop(stack *sp)
{
	int x;
	if(is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->elements[sp->top--];
	return x;	
}

int is_full(stack *sp)   
{
	if(sp->top == SIZE-1)      
		return 1;
	else
		return 0;
}

int is_empty(stack *sp)   
{
	if(sp->top == -1)          
		return 1;
	else
		return 0;	
}

int main()
{
	stack s1;
	
	initialize(&s1);
	
	push(&s1,'H');
	push(&s1,'e');
	push(&s1,'l');
	push(&s1,'l');
	push(&s1,'o');
	int i;
	
	for(i=s1.top;i!=-1;i--)
	{
		printf("%c ",s1.elements[i]);	
	}	
	printf("\nthis is the end of the Code");
	
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.7 Create a stack of 5 names of employees and delete the last name and display it.
Ans:
    #include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define SIZE 10

typedef struct st
{
	int top;
	char name[SIZE][SIZE];	
}stack;


void initialize(stack *sp)
{
	sp->top=-1;
}

void push(stack *sp,char* item)
{
		if(sp->top==SIZE-1)	
			printf("\nStack overflow\n");
		else
			strcpy(sp->name[++sp->top],item);
}


char* pop(stack *sp)
{
	int x;
	if(sp->top==-1)
		printf("\nStack underflow");
	else
		x=sp->name[sp->top--];
	return x;	
	
}
void display(stack *sp)
{
	int i;
	for(i=sp->top;i!=-1;i--)
	{
		printf("%s\n",*(sp->name+i));	
	}	
}


int main()
{
	stack s1;
	initialize(&s1);
	push(&s1,"Ajay");
	push(&s1,"Vijay");
	push(&s1,"Digvijay");
	push(&s1,"jaya");
	push(&s1,"jay");
	printf("Befor POP\n");
	display(&s1);
	printf("\n");
	pop(&s1);
	printf("After POP\n");
	display(&s1);
	printf("\nthis is the end of the Code");
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.8 Create two stacks A and B . A contains 3 alphabets and B contains 3 numbers. Display Both stacks.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>
     #define SIZE 3

typedef struct a_st
{
	int Atop;
	char Aelements[SIZE];	
}A;
typedef struct b_st
{
	int Btop;
	int Belements[SIZE];	
}B;


void Ainitialize(A *sp)
{
	sp->Atop=-1;
}
void Binitialize(B *sp)
{
	sp->Btop=-1;
}

void Apush(A *sp,char item)
{
		if(A_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Aelements[++sp->Atop]=item;
}
void Bpush(B *sp,int item)
{
		if(B_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Belements[++sp->Btop]=item;
}

int Apop(A *sp)
{
	int x;
	if(A_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Aelements[sp->Atop--];
	return x;	
}
int Bpop(B *sp)
{
	int x;
	if(B_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Belements[sp->Btop--];
	return x;	
}

int A_is_full(A*sp)   
{
	if(sp->Atop == SIZE-1)      
		return 1;
	else
		return 0;
}
int B_is_full(B *sp)   
{
	if(sp->Btop == SIZE-1)      
		return 1;
	else
		return 0;
}

int A_is_empty(A *sp)   
{
	if(sp->Atop == -1)          
		return 1;
	else
		return 0;	
}
int B_is_empty(B *sp)   
{
	if(sp->Btop == -1)          
		return 1;
	else
		return 0;	
}
void A_display(A *sp)
{
	int i;
	
	for(i=sp->Atop;i!=-1;i--)
	{
		printf("%c ",sp->Aelements[i]);	
	}	
	printf("\n\n");
}

void B_display(B *sp)
{
	int i;
	
	for(i=sp->Btop;i!=-1;i--)
	{
		printf("%d ",sp->Belements[i]);	
	}	
	printf("\n\n");
}


int main()
{
	A a;
	
	Ainitialize(&a);
	
	Apush(&a,'a');
	Apush(&a,'b');
	Apush(&a,'c');
	
	A_display(&a);
	
	B b;
	Binitialize(&b);
	Bpush(&b,10);
	Bpush(&b,20);
	Bpush(&b,30);
	
	B_display(&b);
	
}
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.9 Create a queue which contains 5 double values and print all values.
 Ans:
     #include<stdio.h>
     #define SIZE 5
typedef struct queue
{
	int front;
	int rear;
	double elements[SIZE];
}queue;
void initialize(queue *qp)
{
	qp->front=-1;
	qp->rear=-1;
}
void add(queue *qp,double item)
{
	if(qp->rear==SIZE-1)
	  printf("\nQueue Overflow");
	else 
	 qp->elements[++qp->rear]=item;
}
int rem(queue *qp)
{
	double x;
	if(qp->front==-1)
	  printf("\nQueue is Empty");
	else
	 x=qp->elements[qp->front++];
	return x;
}
void display(queue *qp)
{
	int i;
	for(i=qp->front;i<qp->rear;i++)
	{
		printf("%lf\t",qp->elements[i]);
	}
}
int main()
{
	queue q;
	initialize(&q);
	add(&q,1.2344);
	add(&q,3.456);
	add(&q,12.45);
	add(&q,10);
	add(&q,1.2);
	
	display(&q);
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.10 Create a queue which contains 5 numbers and print the square value of every element of the queue.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>
     #define SIZE 5

typedef struct queue
{
	int front;
	int rear;
	int elements[SIZE];
}queue;

void initialize(queue *qp)
{
	qp->front=-1;
	qp->rear=-1;
}

void add(queue *qp,int item)
{
	if(qp->rear==SIZE-1)
    printf("\nQueue Overflow");
    else
    {
    	if(qp->front ==-1)
    	qp->front=0;
	    qp->elements[++qp->rear]=item;
    }
}

int rem(queue *qp)
{
	char x;
	if(qp->front==-1)
	printf("\nQueue Empty");
	else
	x=qp->elements[qp->front++];
	return x;
}

void display(queue *qp)
{
	int i;
	for(i=qp->front;i<=qp->rear;i++)
	{
		printf("Square Value is : %d\n",(qp->elements[i])*(qp->elements[i]));
	}
}
int main()
{
    queue q;
	initialize(&q);
	add(&q,1);
	add(&q,2);
	add(&q,3);
	add(&q,4);
	add(&q,5);
	
	display(&q);
		
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.11 Create a stack which contains ASCII values for alphabets and print Alphabets.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>
     #define SIZE 27

typedef struct st
{
	int top;
	int elements[SIZE];	
}stack;


void initialize(stack *sp)
{
	sp->top=-1;
}

void push(stack *sp,int item)
{
		if(is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->elements[++sp->top]=item;
}

int pop(stack *sp)
{
	int x;
	if(is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->elements[sp->top--];
	return x;	
}

int is_full(stack *sp)   
{
	if(sp->top == SIZE-1)      
		return 1;
	else
		return 0;
}

int is_empty(stack *sp)   
{
	if(sp->top == -1)          
		return 1;
	else
		return 0;	
}
void display(stack *sp)
{
	int i;
	for(i=sp->top;i!=-1;i--)
	{
		printf("%c\t",sp->elements[i]);
	}
}

int main()
{
	stack s1;
	
	initialize(&s1);
	
	int i;
	for(i=65;i<91;i++)
	{
		push(&s1,i);
	}	
	display(&s1);
	printf("\nthis is the end of the Code");
	
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.12 Take 10 numbers from user, Make two stacks as Even & Odd, Even stack contains even numbers , Odd stack contains odd numbers.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>
     #define SIZE 10

typedef struct Odd_st
{
	int Atop;
	int Aelements[SIZE];	
}odd;
typedef struct Even_st
{
	int Btop;
	int Belements[SIZE];	
}even;


void Ainitialize(odd *sp)
{
	sp->Atop=-1;
}
void Binitialize(even *sp)
{
	sp->Btop=-1;
}

void Apush(odd *sp,char item)
{
		if(A_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Aelements[++sp->Atop]=item;
}
void Bpush(even *sp,int item)
{
		if(B_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Belements[++sp->Btop]=item;
}

int Apop(odd *sp)
{
	int x;
	if(A_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Aelements[sp->Atop--];
	return x;	
}
int Bpop(even *sp)
{
	int x;
	if(B_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Belements[sp->Btop--];
	return x;	
}

int A_is_full(odd*sp)   
{
	if(sp->Atop == SIZE-1)      
		return 1;
	else
		return 0;
}
int B_is_full(even *sp)   
{
	if(sp->Btop == SIZE-1)      
		return 1;
	else
		return 0;
}

int A_is_empty(odd *sp)   
{
	if(sp->Atop == -1)          
		return 1;
	else
		return 0;	
}
int B_is_empty(even *sp)   
{
	if(sp->Btop == -1)          
		return 1;
	else
		return 0;	
}
void A_display(odd *sp)
{
	int i;
	
	for(i=sp->Atop;i!=-1;i--)
	{
		printf("%d ",sp->Aelements[i]);	
	}	
	printf("\n");
}

void B_display(even *sp)
{
	int i;
	
	for(i=sp->Btop;i!=-1;i--)
	{
		printf("%d ",sp->Belements[i]);	
	}	
	printf("\n");
}

int main()
{
	odd a;
	even b;
	int *s;
	Ainitialize(&a);
	Binitialize(&b);
	int i,j;
	for(i=0;i<SIZE;i++)
	{
		printf("Enter Number :");
		scanf("%d",&j);
		{
	      int val=j%2;
	          switch(val)
	     {
		   case 0:
				Apush(&a,j);
				break;
		   case 1:
				Bpush(&b,j);
				break;
		 }
        }
	}
	A_display(&a);
	B_display(&b);
	printf("\nThis is the end of code ");
	
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.13 Make a program to copy elements of one stack to another.
 Ans:
  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.14 Read 5 numbers from user and store it in a stack.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>
     #define SIZE 5

typedef struct st
{
	int top;
	int elements[SIZE];	
}stack;
void initialize(stack *sp)
{
	sp->top=-1;
}
void push(stack *sp,int item)
{
		if(is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->elements[++sp->top]=item;
}
int pop(stack *sp)
{
	int x;
	if(is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->elements[sp->top--];
	return x;	
}
int is_full(stack*sp)   
{
	if(sp->top == SIZE-1)      
		return 1;
	else
		return 0;
}
int is_empty(stack *sp)   
{
	if(sp->top == -1)          
		return 1;
	else
		return 0;	
}
void display(stack *sp)
{
	int i;
	
	for(i=sp->top;i!=-1;i--)
	{
		printf("%d ",sp->elements[i]);	
	}	
	printf("\n");
}
int main()
{
	stack s1;
	initialize(&s1);
	int i,j;
	for(i=s1.top;i<4;i++)
	{
		printf("Enter Number :");
		scanf("%d",&j);
		push(&s1,j);
	}
	display(&s1);
	printf("\nThis is the end of code ");
	
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.15 Create a Link list of 5 nodes which stores information as a character.
 Ans:
     #include<stdio.h>
     #include<stdlib.h>

typedef struct nd             
{                           
	char data;
	struct nd *next;
}node;

node* createNode(char no)
{
	node *np;
	
	np=(node*)malloc(sizeof(node));  
	
	if(np == NULL)
	{
		printf("Memory not available");
		exit(0);	
	}
	
	np->data=no;
	np->next=NULL;
	
	return np;
}

int main()
{	
	node *p,*head,*tail,*ptr;	
	
	head=createNode('H');  
	tail=head;
	p=createNode('E');    
	
	tail->next=p;  
    tail=tail->next;
   
    p=createNode('L');    
    
	tail->next=p;       
	tail=tail->next;
	
	p=createNode('L');    
    
	tail->next=p;       
	tail=tail->next;
	
	p=createNode('O');    
    
	tail->next=p;       
	tail=tail->next;
	
	ptr=head;
	
	while(ptr!=NULL)
	{
		printf("%c ",ptr->data);
		ptr=ptr->next;
	}

}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


